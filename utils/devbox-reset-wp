#!/usr/bin/env bash

[ -z "${DEVBOX_PROJECT_DIR}" ] && DEVBOX_PROJECT_DIR="/srv/http"

shopt -s extglob

# Check if we have WP-CLI
command -v wp &> /dev/null || { echo "'wp' not found. Install WP-CLI and add it to PATH"; exit 1; }

# Check for the presence of arguments
[ "$#" -lt "1" ] && {
  echo "Wipes the database for a WordPress website and reinstalls.

    Usage: devbox-reset-wp your-wp-site.test

    Available websites:"

  for site in "${DEVBOX_PROJECT_DIR}"/*.test; do
    [ ! -d "${site}" ] && continue
    echo "      - ${site##*/}"
  done

  exit 0
}

site=${1}
path="${DEVBOX_PROJECT_DIR}/${1}"

# Exit if site doesn't exist - bad argument
[ ! -d "${path}" ] && { echo "Website ${site} doesn't exist!"; exit 1; }

# Make sure that the website is a WordPress installation
wp core is-installed --path="${path}" &> /dev/null || { echo "${site}: WordPress is not installed!"; exit 1; }

# Ask to make a backup
read -r -p "Enter file name for a database backup (empty to skip): " bkp
[ -n "${bkp}" ] && {
  name="${bkp%.sql}.sql"
  wp transient delete --all --path="${path}"
  wp cache flush --path="${path}"
  wp db export "${path}/${name}" --path="${path}"
}

# All OK, use WP-CLI to reset
wp db reset --yes --path="${path}"

# Ask to import an existing SQL dump
ls "${path}"/*.sql &> /dev/null && {
  echo "Available SQL dumps:"
  for sql in "${path}"/*.sql; do echo "  - ${sql##*/}"; done
  echo ""
  read -r -p "Enter name of SQL dump to use or leave blank for a fresh install: " dump
  [ -z "${dump}" ] || [ ! -f "${path}/${dump}" ] && echo "Installing fresh..."
  [ -f "${path}/${dump}" ] && {
    wp db import "${path}/${dump}" --path="${path}"
    wp transient delete --all --path="${path}"
    wp cache flush --path="${path}"
    echo "Done."
    exit 0
  }
}

# Or reinstall WordPress
wp core install --url="${site}" --title="${1}" --admin_user=dev --admin_password=dev --admin_email="dev@${site}" --skip-email --path="${path}"
wp site empty --yes --path="${path}"

echo "Done."
